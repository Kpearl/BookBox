<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="PostingMapper">
	
	<resultMap id="postingSelectMap" type="posting">
		<result property="postingNo" column="posting_no" jdbcType="INTEGER"/>
		<result property="postingTitle" column="posting_title" jdbcType="VARCHAR"/>
		<result property="postingContent" column="posting_content" jdbcType="VARCHAR"/>
		<result property="postingRegDate" column="reg_date" jdbcType="DATE"/>
		<result property="postingUpdateDate" column="update_date" jdbcType="DATE"/>
		<association property="user" javaType="user">
			<result property="email" column="email"/>
			<result property="nickname" column="nickname"/>
		</association>
		<collection property="postingFileList" ofType="String" column="upload_no" select="selectPostingFileList"/>
		<collection property="postingLocationList" ofType="location" column="location_no">
			<result property="locationName" column="location_name" jdbcType="VARCHAR"/>
			<result property="locationLatitude" column="latitude" jdbcType="FLOAT"/>
			<result property="locationLongitude" column="longitude" jdbcType="FLOAT"/> 
		</collection>
	</resultMap>
	


	<insert id="addPosting" parameterType="posting" useGeneratedKeys="true" keyProperty="postingNo">
	 	INSERT
		INTO 
			posting( email, posting_title, posting_content ) 
		VALUES 
			( 
				#{user.email}, #{postingTitle}, #{postingContent}
			)
	</insert>
	
<!-- 	<insert id="addPostingFile" parameterType="posting">
		INSERT
		INTO upload_file( category_no, target_no, file_name, origin_name )
		
	</insert> -->
	
	<insert id="addPostingLocation" parameterType="map">
		INSERT
		INTO 
			location( posting_no, location_name, latitude, longitude )
		VALUES
			( #{postingNo}, #{locationName}, #{locationLatitude}, #{locationLongitude} )
	</insert>

	
	<select id="getPosting" parameterType="posting" resultMap="postingSelectMap">
		SELECT 
			p.posting_no, p.email, p.posting_title, 
			p.posting_content, p.reg_date, p.update_date, 
			u.nickname, l.location_name, l.latitude, l.longitude
		FROM 
			posting p
			LEFT OUTER JOIN location l ON p.posting_no = l.posting_no
			LEFT OUTER JOIN user u ON p.email = u.email
		WHERE 
			p.posting_no = #{postingNo} 
			AND p.active = 1 
	</select>
	
	<select id="getPostingList" parameterType="search" resultMap="postingSelectMap">
		SELECT 
			p.posting_no, p.email, u.nickname, 
			p.posting_title, p.posting_content, 
			p.reg_date, p.update_date
		FROM
			posting p
			LEFT JOIN user u ON p.email = u.email
		<where>
			p.active = 1
			<if test="condition == 'booklog'">
				AND p.email = #{keyword}
			</if>
			<if test="condition == 'popular'">
				
			</if>
		</where>
		ORDER BY
			 p.reg_date DESC
	</select>
	
	<update id="updatePosting" parameterType="posting">
		UPDATE posting
		<set>
			<if test="postingTitle != null">
				posting_title = #{postingTitle},
			</if>
			<if test="postingContent != null">
				posting_content = #{postingContent},
			</if>
			update_date = CURRENT_TIME STAMP
		</set>
		WHERE
			posting_no = #{postingNo}
	</update>
	
	
	<delete id="deletePostingLocation" parameterType="posting">
		DELETE
		FROM 
			location
		WHERE
			posting_no=#{postingNo}
	</delete>

</mapper>